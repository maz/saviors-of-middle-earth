// Generated by CoffeeScript 1.4.0
(function() {

  window.addEventListener('load', function() {
    var editor, _i, _len, _ref, _results;
    _ref = document.querySelectorAll('.image-editable');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editor = _ref[_i];
      _results.push((function(editor) {
        var field_name, form, processFile, scale_image, sizes;
        form = editor;
        if (editor.getAttribute('data-form')) {
          form = document.getElementById(editor.getAttribute('data-form'));
        }
        sizes = editor.getAttribute('data-sizes').split(' ').map(function(x) {
          return parseInt(x, 10);
        });
        field_name = editor.getAttribute('data-field-name');
        editor.addEventListener('dragover', function(evt) {
          evt.stopPropagation();
          evt.preventDefault();
          evt.dataTransfer.dropEffect = 'copy';
          return editor.classList.add('highlight');
        }, false);
        editor.addEventListener('dragleave', function() {
          return editor.classList.remove('highlight');
        }, false);
        scale_image = function(img, size) {
          return setTimeout(function() {
            var can, ctx, dataUrl, h, input, w;
            can = document.createElement('canvas');
            can.width = can.height = size;
            ctx = can.getContext('2d');
            w = img.width;
            h = img.height;
            if (w >= h) {
              h = (size * h) / w;
              w = size;
            } else {
              w = (w * size) / h;
              h = size;
            }
            ctx.drawImage(img, (size / 2) - (w / 2), (size / 2) - (h / 2), w, h);
            dataUrl = can.toDataURL("image/png");
            input = form.querySelector("input[name=" + field_name + "_" + size + "]");
            if (!input) {
              input = document.createElement('input');
              input.type = 'hidden';
              input.name = "" + field_name + "_" + size;
              form.appendChild(input);
            }
            return input.value = dataUrl.replace('data:image/png;base64,', '');
          }, 0);
        };
        processFile = function(file) {
          var reader;
          reader = new FileReader;
          reader.onload = function(evt) {
            var img;
            img = new Image;
            img.onload = function() {
              var size, submit, _j, _len1;
              editor.style.backgroundImage = "url('" + img.src + "')";
              for (_j = 0, _len1 = sizes.length; _j < _len1; _j++) {
                size = sizes[_j];
                scale_image(img, size);
              }
              submit = form.querySelector('.image-submit');
              if (submit) {
                return submit.style.display = 'block';
              }
            };
            return img.src = evt.target.result;
          };
          return reader.readAsDataURL(file);
        };
        return editor.addEventListener('drop', function(evt) {
          var file, _j, _len1, _ref1, _results1;
          evt.stopPropagation();
          evt.preventDefault();
          editor.classList.remove('highlight');
          _ref1 = evt.dataTransfer.files;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            file = _ref1[_j];
            if (file.type.indexOf('image') === 0) {
              processFile(file);
              break;
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }, false);
      })(editor));
    }
    return _results;
  }, false);

}).call(this);
